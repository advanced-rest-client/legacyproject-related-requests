/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   legacyproject-related-requests.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement} from 'lit-element';

declare namespace UiElements {

  /**
   * An element that computes a list of requests related to a project.
   * It handles all request related events to update the list if the request object
   * change.
   *
   * ### Example
   *
   * ```html
   * <legacyproject-related-requests project-id="project-id"></legacyproject-related-requests>
   * <script>
   *  document.querySelector('legacyproject-related-requests')
   *  .addEventListener('project-related-requests-read', function(e) {
   *    console.log('Request for project: ', e.detail.projectId, ' are ready: ', e.detail.items);
   *  });
   * &lt;/script>
   * ```
   */
  class LegacyprojectRelatedRequests extends LitElement {

    /**
     *  Returns a handler to the saved store instance
     */
    readonly savedDb: any;

    /**
     *  Returns a handler to the saved store instance
     */
    readonly projectDb: any;

    /**
     * An ID of the legacy project. Once changed it queries the datastore for
     * related requests.
     */
    projectId: string|null|undefined;
    readonly data: Array<object|null>|null;
    _data: any;
    readonly querying: Boolean|null;
    _querying: any;

    /**
     * If `true` then it queries for whole request objects.
     * Otherwise it only returns the `name`, `_rev` and `_id` properties.
     */
    fullQuery: boolean|null|undefined;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Automatically run function when either `opened` or `projectId` change.
     */
    _autoQuery(projectId: String|null): any;

    /**
     * Queries the datastore for related requests list for the project.
     *
     * @param id Project ID
     * @returns Promise resolved to the list of related to project
     * requests.
     */
    query(id: String|null): Promise<any>|null;
    _readProjectRequests(id: any): any;
    _getProjectRequest(keys: any): any;
    _tryLegacy(id: any): any;

    /**
     * Filters request list returned by the query to ones related to current
     * request.
     *
     * @param dbResponse PouchDB query response
     * @param id Project ID
     * @returns Filtered list of requests that are related to the project
     */
    _filterRequests(dbResponse: object|null, id: String|null): any[]|null;

    /**
     * Perpares request objects depending on the `fullQuery` property.
     * If the property is set this does nothing. Otherwise this returns the
     * `name`, `_id` and `_rev` properties in the list of objects.
     *
     * @param list List of request objects
     * @returns List of requests with requested scope.
     */
    _setDataScope(list: any[]|null): any[]|null;

    /**
     * Sorts requests list by `projectOrder` property. Also, maps  `_id` to `id`
     * so some legacy views can support this data.
     *
     * @param list List of request objects
     * @returns Sorted list of requests
     */
    _prepareData(list: any[]|null): any[]|null;

    /**
     * Handler for the `request-object-changed` event.
     * If the event is not cancelable and its `legacyProject` property equal current
     * project ID then it updates/adds request to the `data` list.
     */
    _requestObjectChanged(e: CustomEvent|null): void;

    /**
     * Handler for the `request-object-deleted` event. Removes a request from the
     * `data` list if removed item is on the list.
     */
    _requestObjectDeleted(e: CustomEvent|null): void;

    /**
     * Handler for the `request-objects-deleted` event. Removes deleted requests
     * from the `data` list if they are on the list.
     */
    _requestObjectsDeleted(e: CustomEvent|null): void;

    /**
     * Checks if any of the removed items is on current `data` list. Removes
     * items that are in the `ids` list.
     *
     * @param ids List of removed items IDs.
     */
    _checkDeleted(ids: Array<String|null>|null): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "legacyproject-related-requests": UiElements.LegacyprojectRelatedRequests;
  }
}
