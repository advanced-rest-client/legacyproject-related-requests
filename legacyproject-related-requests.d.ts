/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   legacyproject-related-requests.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />

/**
 * An element that computes a list of requests related to a project.
 * It handles all request related events to update the list if the request object
 * change.
 *
 * ### Example
 * ```html
 * <legacyproject-related-requests project-id="project-id"></legacyproject-related-requests>
 *
 * <script>
 * document.querySelector('legacyproject-related-requests')
 * .addEventListener('project-related-requests-read', function(e) {
 *   console.log('Request for project: ', e.detail.projectId, ' are ready: ', e.detail.items);
 * });
 * </script>
 * ```
 */
declare class LegacyprojectRelatedRequests extends Polymer.Element {

  /**
   *  Returns a handler to the datastore instance
   */
  readonly db: any;

  /**
   * An ID of the legacy project. Once changed it queries the datastore for
   * related requests.
   */
  projectId: string|null|undefined;

  /**
   * list of requests found for the project.
   */
  data: any[]|null|undefined;

  /**
   * If `true` then it queries for whole request objects.
   * Otherwise it only returns the `name`, `_rev` and `_id` properties.
   */
  fullQuery: boolean|null|undefined;

  /**
   * If set then query is performed
   */
  readonly querying: boolean|null|undefined;
  connectedCallback(): void;
  disconnectedCallback(): void;

  /**
   * Dispatches non-bubbling `project-related-requests-read` event with
   * data.
   *
   * @param requests List of request related to the project.
   * @param projectId ID of the project
   */
  _dispatchReadEvent(requests: Array<object|null>|null, projectId: String|null): void;

  /**
   * Automatically run function when either `opened` or `projectId` change.
   */
  _autoQuery(projectId: any): void;

  /**
   * Queries the datastore for related requests list for the project.
   *
   * @param id Project ID
   * @returns Promise resolved to the list of related to project
   * requests.
   */
  query(id: String|null): Promise<any>|null;

  /**
   * Filters request list returned by the query to ones related to current
   * request.
   *
   * @param dbResponse PouchDB query response
   * @param id Project ID
   * @returns Filtered list of requests that are related to the project
   */
  _filterRequests(dbResponse: object|null, id: String|null): any[]|null;

  /**
   * Perpares request objects depending on the `fullQuery` property.
   * If the property is set this does nothing. Otherwise this returns the
   * `name`, `_id` and `_rev` properties in the list of objects.
   *
   * @param list List of request objects
   * @returns List of requests with requested scope.
   */
  _setDataScope(list: any[]|null): any[]|null;

  /**
   * Sorts requests list by `projectOrder` property. Also, maps  `_id` to `id`
   * so some legacy views can support this data.
   *
   * @param list List of request objects
   * @returns Sorted list of requests
   */
  _prepareData(list: any[]|null): any[]|null;

  /**
   * Handler for the `request-object-changed` event.
   * If the event is not cancelable and its `legacyProject` property equal current
   * project ID then it updates/adds request to the `data` list.
   */
  _requestObjectChanged(e: CustomEvent|null): void;

  /**
   * Handler for the `request-object-deleted` event. Removes a request from the
   * `data` list if removed item is on the list.
   */
  _requestObjectDeleted(e: any): void;

  /**
   * Handler for the `request-objects-deleted` event. Removes deleted requests
   * from the `data` list if they are on the list.
   */
  _requestObjectsDeleted(e: any): void;

  /**
   * Checks if any of the removed items is on current `data` list. Removes
   * items that are in the `ids` list.
   *
   * @param ids List of removed items IDs.
   */
  _checkDeleted(ids: Array<String|null>|null): void;
}

interface HTMLElementTagNameMap {
  "legacyproject-related-requests": LegacyprojectRelatedRequests;
}
